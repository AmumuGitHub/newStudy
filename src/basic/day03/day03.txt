计算机工作原理
  程序：数据和指令的顺序处理，可以解决一切数据逻辑问题。
 宏观的说法： 计算机什么都可以处理。
 程序：数据结构+算法（指令序列）
  
根本原则：计算机只能处理数据，任何业务问题都要转为数据的处理。
Java的运行原理：
   编写Java源程序(.java) --编译器的编译-> 
   Java字节码文件(.class) --Java虚拟机解释->
   计算机CPU能够处理的数据+指令->执行处结果

2进制基础: 计算机是如何处理数据的!
  1) 计算机为了成本考虑采用2进制处理数据
  2) 人类的计数习惯是10进制. 
  3) 计算机编程语言(Java PHP C) 利用API 实现
    10进制的输入与输出,
      
      计算机内部是2进制  <--API 算法--> 人类习惯 10进制字符串  
    00001010         <--API 算法--> "10"
    11111111         <--API 算法--> "-1" 
    11111110         <--API 算法--> "-2" 
    
    System.out.println(10);//00001010 -> "10"
    System.out.println(0xa);//00001010 -> "10"
   
    int i = 20;//i是2进制的数据, 不是10进制的!
  4) 计算机为了解决负数问题, 采用补码处理有符号数.
    "补码"满足: -n = ~n+1
         int
    max  01111111 11111111 11111111 11111111
    min  10000000 00000000 00000000 00000000
    -1   11111111 11111111 11111111 11111111
    0    00000000 00000000 00000000 00000000
    
    max + 1 = min  (溢出, 不满足一般的数学规则)
    了解补码的缺点(溢出问题), 要利用优点, 避免缺点(超范围计算)
     补码是计算机底层计算规则, 经过API的封装只是表现为有符号
     现象!
  
  5) 16进制, 是2进制的简写. 一般情况下书写2进制采用16进制
  形式.  计算机内部是没有16进制数据的!
    16进制是2进制每4位为一个单元的缩写!
    
数据类型: 分为两大类: 基本类型和引用类型.
  基本类型: 8种, (除了基本类型以为的数据类型都是引用类型)
 整数类型 byte, short, int, long
 浮点数类型: float, double
 布尔类型: boolean
 字符类型: char
 
 引用类型: String  
 
 1) 整数类型 byte, short, int, long
   Java整数都是有符号数(补码)
   byte 8位补码    -128 ~ 127 
   short 16位补码  -32768 ~ 32767
   int   32 位补码  -21亿  ~ 21亿    -2G ~ 2G-1 
                  -1024*1024*1024 ~ 1024*1024*1024-1
                  -2^31 ~ 2^31-1
                  0x80000000 ~ 0x7fffffff
   long 64 位补码 很大
           0x8000000000000000L ~ 0x7fffffffffffffffL         
   1. Java中整数字面量(直接量) 默认是int类型数据
      字面量(直接量): 直接写出的常数数据如: 5  6  28
   2. 使用L/l为后缀的是long类型字面量
     long a = 10000000000000L;
     
   3. Java 使用long类型表示时间!
 
 2) 浮点数类型 float  double, 采用IEEE 754标准定义
    就是小数类型: 1.5  2.3  
   float 是32位浮点数
   double 是64位浮点数
   浮点数特点:精度(精确程度) 
   1. 不是精确的数字, 是一个尽可能精确的数字.
   2. double 的经典大约是 float的两倍.
   3. 因为double精确, 所以常用!
   4. 默认的浮点数字面量是 double类型
   5. 后缀 d/D 是double F/f 是float类型
   6. 浮点数不能进行精确计算, 所以不能进行精确比较! 
   
   pi = 3.1415926535897932384626433832795028
   
  3) 布尔类型: boolean  只有两个字面量:true(真) false(假)
  boolean used = true;//used 二手的  真的是二手
  if(used){
  	System.out.println("挥泪跳楼价: 8折!");  	
  }else{
  	System.out.println("新品上市: 9折!");  	
  }
  boolean show = false;
  boolean isMan = true;//纯爷们
  boolean gameOver = true;
  //...
  
  boolean f = true;
  if(f){
  	Syso....
  }
  
  4) 字符类型 char: 字符类型是一个16位无符号"整数"!
   1. unicode 组织: 把字符变为数字! 是一种规定!unicode编码
      如: 田=30000  A=65  中=20013 
      在这个编码中: 英文编码兼容于ASCII
   2. java 字符类型采用unicode编码  
   3. Java 字符类型数值范围: 0~65535
   4. 字符字面量采用单引号作为定界符:(不是双引号!)
     如: '中' 是字符字面量
     提示: 双引号引用的是字符串字面量!
   5. 字符是整数, 可以参与数学运算!
    如: char c = 'A'+1; //c是字符'B'
   6. 特殊字符, 可以使用转义表示:
     单引号:  char c = '\''; //c是单引号 
     双引号:  char c = '\"'; //c是双引号 
	'\\' : \
	'\t' : tab 字符
	'\n' : 换行
	'\r' : 回车
	'\u4e2d': 16进制形式的unicode编码 \u是引导符号
	
   7. 'A' 65  'B' 66  ... 'Z' 90 大写字母是连续编码的
      'a' 97  'b' 98  ... 'z' 122 小写字母是连续编码的
      '0' 48 ... '9' 57 数字字符是连续编码
      
      实验: '6'-'0' = 6  '8'-'0'=8  '5'-'0'=5
      结论: 数字字符 减 '0'字符,得到对应的数字!
      
  基本类型的数据类型转换
   
   
  
    
      
      
      
      
      
      
       
    
	
	
	
	   
    
  
  
  
  
  
  
  
  
  
   
  
  
  
  
  
  
  
  
  
  
  
  
   
   
   
   
      
   
 
 
 
 
 
 
 
 
 
 
  
  
















