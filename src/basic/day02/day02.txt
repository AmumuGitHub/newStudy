Linux 
  1) 类Unix， 山寨版
  2) 云计算的主流系统平台
  3) 熟悉常用的Linux命令, 会用 更会描述! 使用术语描述!
 
 文件夹==目录
 路径: 由系列目录组成的:  /home/soft01
 绝对目录/相对目录
 根目录
 用户主目录/主目录
 父目录(上层目录)
 当前目录(当前工作目录)
 
 常用目录:
  .
  ..
  /
  ~
  /home/soft01
  /home/soft01/Desktop 桌面文件夹
  
 要能够区别: 根目录  主目录  和 桌面目录
 
 命令
   pwd
   ls
   cd
   mkdir
   rm 
   cp
   touch
   
   ls  当前目录的内容
   ls /
   ls /etc
   ls ~
   ls ..
   
   rm -rf file1 file2 ...
   
 命令语法规则:
   命令  -选项  参数
   
 Eclipse 开发
   1) 创建Java项目(Java Project) 
        项目是保存在工作空间中的文件夹!
     Contents: 选择第二项, 使Java源文件与目标文件分开
   2) 创建Java类, 会自动创建Java原文件.
      package(包): 对Java的文件进行分类的.
         一般按照软件功能和层次分包. 建议使用小写字母!
      class name(类名): 类名和.java文件名一致     
          类名规则(规范):首字母大写, 多个单词首字母也大写!
      main 方法: 是Java软件入口方法.    
  实验:
   cd ~/workspace/JSD1310_FDM 
   pwd
   ls  (src bin)
   // 找到 HelloWorld.java  和 HelloWorld.class   
   cd src
   cd day01
   pwd
   ls  (HelloWorld.java)
   cat HelloWorld.java  查看"文本文件"的内容
   gedit HelloWorld.java  使用"写字板"编辑
   
   cd ../../bin/day01
   pwd
   ls   (HelloWorld.class) 不能查看和编辑

  程序  = 数据结构 + 算法  
      = 数据 + 处理指令序列
 
  计算机只能处理2进制数据!        
 
 二进制基础:
  1) 计算机只能处理数据, 数据是2进制数据
     原因是基于成本的考虑!
  2) 人类习惯使用10进制数据. 计算机在输入输出时候
    利用算法(Java 的 API)将2进制转换为十进制.
  3) 计算机采用补码, 变通的实现了负数处理
     (就是拿正数 来处理负数问题, 很变态)
      -n = ~n + 1
  4) 16进制: 是2进制的缩写, 本质就是2进制.
    
  
10 进制 
  1) 逢10进1
  2) 基数 10
  3) 权: 每个数位代表1的个数, 权是基数的n次幂 
      10000 1000 100 10 1 
  4) 数字: 0 1 2 3 4 5 6 7 8 9 

2 进制
  1) 逢2进1
  2) 基数 2
  3) 权: 每个数位代表1的个数, 权是基数的n次幂 
      128 64 32 16 8 4 2 1
  4) 数字: 0 1 
  
  2进制转10进制: 使用每个位数字乘以权的和
   10100101(2) = 128+32+4+1 = 165(10)
  10进制转换为2进制:
             128 64 32 16 8 4 2 1
   234(10) =   1  1  1  0 1 0 1 0(2)
             106 42 10 10 2 2 0 0
           = 11101010(2)
  10    2进制
  0    0000
  1    0001
  2    0010
  3    0011
  4    0100
  5    0101
  6    0110
  7    0111
  8    1000
  9    1001
 10    1010
 11    1011
 12    1100
 13    1101
 14    1110
 15    1111
 
 补码: 为了成本考虑, 采用高位为1的数作为负数使用
 以4位补码为列
 1) 高位为1的数作为负数使用, 高位称为符号位
 2) 超过4位的计算结果溢出舍弃
   如: 1111 + 0001 = 0000 
      -1  +  1   = 0
 3) 补码是有范围(-8~7)的, 超范围会溢出 
    溢出结果不符合数学规律, (了解极值)要避免溢出计算!
 4) 补码是对称的: -n = ~n + 1
    利用这个公式可以快速的计算负数的补码 (@_@)
      负数的补码 = 取反 (正数的补码) ＋ １
    如: 计算-6的补码
    1) 找到6的补码   0110 
    2) 取反操作(~6) 1001 
    3) +1          1010 
    得到-6的补码是 1010      
    
 5) 如果补码范围不够, 可以采用更高位数的补码.
   Java中 8位补码   byte  -128 ~   -1      0      ~ 127  
                      10000000 11111111 00000000 01111111
   Java中 16位补码 short -32768 ~ 32767
          10000000 00000000 ~ 011111111 11111111       
   Java中 32位补码 int 约-21亿    21亿
   Java中 64位补码 long 很大
   
 16进制 
  1) 逢16进1
  2) 基数 16
  3) 权: 每个数位代表1的个数, 权是基数的n次幂 
      256 16 1
  4) 数字: 0 1 2 3 4 5 6 7 8 9 a b c d e f  
    
  10  2进制  16进制
  0    0000  0
  1    0001  1
  2    0010  2
  3    0011  3
  4    0100  4
  5    0101  5
  6    0110  6
  7    0111  7
  8    1000  8
  9    1001  9
 10    1010  a
 11    1011  b
 12    1100  c
 13    1101  d
 14    1110  e
 15    1111  f
 
 65  0100 0001   41
 65  64+1      4*16+1  = 65
 66  0100 0010   42 
 66  64+2       4*16+2 = 66
 67  
 68 
 ... 
192  1100 0000   c0   
     128+64     12*16 = 192
      
 2进制可以每4位缩写为1位16进制数字!
    
 
 
 
  
  
  
  
  
  
  
  
  
  
  
  
      
   
   
   
   
  
 
 
 
 
 
 
 
 
 
  
  
  
  
  
  
 
 
 
 
 
 
  
 
   