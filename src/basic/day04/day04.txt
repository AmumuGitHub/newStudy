基本数据类型： 
  1) 整数  补码
    byte short int long
    1. byte short 很少使用 范围很小
    2. 最常用的是 int, 但是要注意int的范围不是特别大!
    3. 超过int范围就使用long
  
  2) 浮点数 IEEE 754 
    float double
    1) 由于精度高 常用double 
    2) float很少使用, 但是在Android系统中
      float精度对于手机屏幕足够高了, 在Android API中常用
  3) boolean  表示 true  false
    boolean pause = true;  暂停
    java 中  true != 1   false!=0 
   
    选择如下代码的执行结果:
    boolean pause = 1;
    if(pause){
    	System.out.println("游戏暂停中...");
    }
   A.编译错误  B.运行异常  C.游戏暂停中... D.无结果
   
  4) 字符类型: char, 字符是一个16位无符号整数!
    1 范围 0 ~65535
    2 很多控制字符没有输出效果!
     char c = 7;

运算符 
   数学运算符: + - * / %
   1) 同种类型参与运算, 得到同种类型结果.
   
   取余数运算:
   假设 n%3 取余数
   1) 如果 n<0 结果是 负数或者0, 考试中会出现, 工作中很少用!
   2) n>=0 结果是 [0, 3)
   3) n>=0 的结果是周期函数 
   
   自增运算  ++ --
   1 注意: a++ 表达式的值 和 a的值是不同的!
   
  "+" 号的重载现象, +号是Java中唯一的重载运算符
  也就是说: Java中有两种加法!
  
  任何数据与字符串进行+, 都是字符串的连接运算!
  
  重载: 同一个符合, 但是实际功能不同!
  
   重载现象:  汽车"加油"    李娜"加油" 
    
  "1" + 1  是 字符串的连接 "1"连接"1" = "11"
   1  + 1  是数学加法 1+1 = 2 
  
  
数字的精度: 精确度, 有效数字的长度
  
 n1 3.1415926535987932384626433832
 n2 3.1415926535988
 n3 3.1415926535987932384626433832 * 100
 
 n1 的精度大于 n2
 n1 和 n3 的精度一样!
 n3 数值大于 n1 
 n2 的数值大于 n1
 
 float  333333.33 float 的精度
 手机屏幕的精度: 1920 * 1080 高清HD标准
 
 
 两种多路分支: 
   if ... else if ... else 根据任何条件进行分支, 也包括
   整数条件, 性能没有switch好. 
   
   switch ... case 只能根据整数(byte char short int
   , 不能是long!) 进行分支, 使用受限制! 但是性能好!
 
 根据实际软件业务需要选择分支语句!
 
 
 循环结构:  
   for    "经典使用"是计数循环! 
   while  
   do while
   
   案例: 实现 1 + 3　+ 5 + 7 + 9 = ?  10以内的奇数和!
   累加 1 3 5 7 9 
   
   
   
   
   
   
   
   
   
   
   
   
 
 
 
 
   
 
 
 
 
     
 
 
 
 
 
 
 
 
 
 
 
  
 
  
  
  
  
  
  
  
  
  
  
  
   
   
   
   
   








 





