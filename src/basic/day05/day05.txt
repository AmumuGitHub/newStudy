运算符
  比较运算：> >= < <= == != 比较变量的数值
  逻辑运算:  短路运算： && || !   非短路运算：& | 
  条件运算，3元运算  <>？<> ：<>
  + 的重载现象
  赋值运算 与 复合赋值运算

流程控制
  分支流程控制
  if(){
  }
  
  if(){
  }else{
  }
  
  if(){
  }else if(){
  }
  
  switch(){
  	case :
  }
  
  if(canDrop()){         //如果能够下落
    tetromino.softDrop();//四格方块 软下落一格
  }else{                 //否则的话
  	landIntoWall();      //降落到墙里面
  	destroyLines();      //销毁很多行
  	checkGameOver();     //检查游戏结束了吗?
  }
  
  
  循环流程控制
   for   while   do while
   
   for: 经典的用法是按照 次数 个数 进行的循环
     累加了: i= 1 3 5 7 9 
    1) (1) 初始化表达式只执行一次!
    2) (2)-(3)-(4) 循环, 注意执行顺序,(4)在循环体后执行
    3) 循环从(2)退出, 是不满足条件时候退出
          如: 退出时候 i=11 
   
              
  for      经典用法: 与次数有关的循环
  while    经典用法: 与次数无关, 循环条件在循环体开始检查
  do while 经典用法: 与次数无关, 循环条件在循环体结束检查
  
  循环可以相互替换!
       for(;循环条件;){}  等价  while(循环条件){}
   	   
   	   for(初始化; 循环条件; 递增表达式){
   	   	  循环体
   	   }
   	   
   	     等价
   	   
   	     初始化;
   	   while(循环条件){
   	        循环体
   	        递增表达式
   	   }
   
      死循环: for(;;){} == for(;true;){} == while(true){}
   
   do{
     //循环体
   }while(循环条件);
    等价
   while(true){ // for(;;){
     //循环体
     if(!循环条件){
       break;
     }
   }
  
  如果循环业务过程, 在循环体中部有循环条件! 
  解决方案:
    while(true){
      //循环体
      if(循环结束条件){
        break;
      }
      //循环体
    }
 
 如果不能确定使用哪种循环! 请使用 "死循环"   
 
   
   
 数组:
 
  1 数组变量 是对数组整体的引用, 相当于集合代词  
    同学们 代词
  
  如何声明数组变量  和 初始化数组变量
   
     数据类型[] 变量名; 
     一个不建议的写法: 数据类型 变量名[];   
   初始化, 就是赋值, 初始化为null
     变量名 = null; 
  
  
  
  2 数组 是类型一致的一组数据
    某个班级的全体学生
 
  如何创建一个数组!
  
    
  3 数组元素 数组中的每个个体
    某个学生
  
  如何访问数组的元素
  
  
 
 
 
 
 
 
 
   
   
   
   
  
  
  
  
  
  
  
  
  
  
  
  












