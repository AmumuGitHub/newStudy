多线程
操作系统当中,可以同时运行多个程序(任务).
每一个程序称之为是一个进程.

对于一个程序,又可以同时运行多个任务
每一个任务称之为是一个线程.

看似是同时运行,但实际上每个任务都是走走停
停的.这种现象称之为并发.

同步与异步 
同步执行:有先后顺序的执行.
异步执行:各自执行各自的,没有顺序



Thread类
java用于描述一个线程的类


线程中的基本概念

线程             :    要并发执行的任务  

时间片段      :    cpu运行线程的时间

cpu              :    中央处理单元

线程调度      :    管理所有并发运行的任务,
                         尽可能均匀的分配时间片段
                         给每一个线程.使得他们可以
                         被cpu运行.


现实版并发操作
葛大爷同时拍了三部戏:赵氏孤儿,非诚勿扰2
,让子弹飞

经纪人分配当期让葛大爷去一个剧组排序.
这个过程就是并发的

经纪人:线程调度
档期:时间片段
葛大爷:cpu
剧组:线程

经纪人分配档期让葛大爷去拍戏
时间调度分配时间片段让cpu执行线程

线程不能不可控:
线程调度机制分配给线程的时间片段长短
线程调度机制将时间片段分配给哪个线程

但是线程调度机制会尽量均匀的分配

后台线程,守护线程
使用和前台线程一样.但守护线程有一个特点
当一个进程中所有前台线程都结束后,无论后台
线程是否还在运行,都要强制结束.并使进程结束

线程的优先级


线程安全问题
多线程访问同一资源时,就会出现线程安全问题
解决的办法是使异步操作变为同步操作


StringBuilder
StringBuffer

非线程安全                        线程安全
HashMap                         Hashtable
ArrayList                           Vector

wait与notify  此两个方法是Object中的

很多时候,两个或多个线程工作时,要基于某个线程的工作结果.这时候,我们可以使用wait方法先将这些线程等待,直到这个线程工作完毕,在通知他们开始工作.

java的网络编程
网络应用模式
C/S:客户端-服务器端  client-server

B/S:浏览器-服务器端  browser-server
       B/S结构实际上就是客户端统一的一种特殊的C/S

连接方式:
    永远是客户端连接服务端

java Socket技术
Socket称为套接字

Socket类
表示客户端的Socket

ServerSocket类
表示服务端的Socket

连接方向
Socket连接ServerSocket

网络通信本质上就是建立连接后双方打开两个流,互相发送数据,互相读取数据.

线程池
频繁的创建销毁线程对服务器的性能开销是很大的.我们应当最当程度的重用线程.

线程池就帮我们解决了该问题.

ExecutorService类
提供了线程池相关的功能
可以管理线程,指派任务等操作.

创建线程池,使用工厂方法
Executors.newCachedThreadPool()
创建一个可以根据需要创建线程的线程池,并在
线程空闲时重用它们

Executors.newFixedThreadPool(int i)
创建一个固定大小的线程池,并在线程空闲时重用他们

Executors.newScheduledThreadPool(int i)
创建一个可以将任务延迟执行的线程池.

Executors.newSingleThreadExecutor()
创建一个单线程工作的方式


双缓冲队列
双缓冲队列内部由两条队列实现,可以保证同一时间能有一个线程向队列中存放元素,另一个线程从队列中获取元素.
比单队列同步的效率要高!

BlockingDeque

ArrayBlockingDeque:固定大小的缓冲队列.
构造方法要求指定队列大小.当元素存满后,在向
队列中添加元素时,需要排队
存取元素遵循:FIFO

LinkedBlockingDeque:不固定大小的缓冲队
列

PriorityBlockingDeque:类似于LinkedBlockingDeque,但存取元素不遵循FIFO.而是按照自然排序原则存放元素.

SynchronousQueue:特殊的缓冲队列,存取元素必须交替进行.

















































